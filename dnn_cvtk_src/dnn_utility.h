#ifndef DNN_UTILITY_H
#define DNN_UTILITY_H

#define NUM_LAYERS 7
#define MAXLINE 1024
#define PFILE_HEADER_SIZE 32768
#define BIGLITTLESWAP 1
//add by ygyin 20131101
#define IGNOREFLAG 0x1010101
#define INITIALCHUNKSIZE 1024
#include <stdio.h>
#include <mkl.h>

typedef class Interface wInterface;

struct NodeArg
{
	float *d_X;//input
	int *d_T;//target label of input
	int *d_R;//classify result generated by model --added by feiyu 2013,11,06

	float *d_W[NUM_LAYERS];
	float *d_B[NUM_LAYERS];
	float *d_Wdelta[NUM_LAYERS];	
	float *d_Bdelta[NUM_LAYERS];
	float *d_Y[NUM_LAYERS];
	float *d_E[NUM_LAYERS];

	int numN;//miniBatch size

	int featDim;
	int featCRange;
	int *dnnLayerArr;
	int dnnLayerNum;
	float lRate;
}; 

typedef struct
{
	// data of norm File
	float *meanArr;
	int meanArrLength;
	float *dVarArr;
	int dVarArrLength;
}NormArgument;

typedef struct
{
	unsigned int start;
	unsigned int end;
	int dataSize;
}ChunkSEindex;

typedef struct CpuArg
{
	/****** add for jumpframe and discard  ******/
	int nmod;
	int remainder;

	int *discard_labs;//TODO no anymore
	int discard_num ;
	float discard_prob ;
	float lRate;
        /************/

	char *dataFileName;    //pfile
	char *labelFileName;   //pfile
	char *normFileName;	   //norm
	char *weightFileName;  //wts
	char *outputWtsPath;
	char *logFileName;

	// feature config 
	int featDim;
	int featCRange;

    //DNN struct config
	int *dnnLayerArr;
	int dnnLayerNum;

    //DNN output number
	int outputLayerNum;
	
	//random seed;
	long int  randomSeed;	
	//data size
	int chunkSize;
	int bunchSize;

	// when init , asgin and check 
	FILE *pDataFile;
	FILE *pLabelFile;
	FILE *pNormFile;
	FILE *pLogFile;
	FILE *pWtsFile;

	//norm info
	NormArgument *normInfo;
	//total count of sentence and feature
	unsigned int totalSentNum;
	unsigned int totalFtrNum;
	unsigned int totalChunks;
	unsigned int totalSamples;
	unsigned int cvTotalChunks;
	unsigned int cvTotalSamples;
	
	unsigned int curChunkIndex;
	int* chunkIndex;
	bool cvFlag;
	//read
	int train_bp_range_beg;
	int train_bp_range_end;
	int train_cv_range_beg;
	int train_cv_range_end;
	//device id
	int devId;

	//interface
	wInterface* interface;
}CpuArg; // for cpu

typedef struct
{
	int initFlag;
	int chunkSize;
	int bunchSize;
	//data index
	int dataSize;
	int dataIndex;

	int featDim;
	int featCRange;

	//data 
	float *dataArr;
	//label
	int *labelArr;
	//rand Arr
	int *randArr;
	//ftr index
	unsigned int offset;

	/****** add for jumpframe and discard - 2014-3-6 ******/
	//pipel has 2 Readchunk data buffer
	int samples_remain ;
	/************/
}ChunkContainer; // for one trunk

//add by ygyin 2013-10-21 9.23
extern "C" int GetInitFileConfig(const char *initFileName, const char *initNum, CpuArg &cpuArg);
extern "C" int InitNodeConfig(const CpuArg &cpuArg, NodeArg &nodeArg);
extern "C" int FetchOneChunk(CpuArg &cpuArg, ChunkContainer &oneChunk);
extern "C" int FetchOneBunch(ChunkContainer &oneChunk, NodeArg &nodeArg);

extern "C" void UninitProgramConfig(CpuArg &cpuArg, NodeArg &nodeArg, ChunkContainer &oneChunk);
extern "C" void WriteWts(NodeArg &nodeArg, CpuArg &cpuArg);
extern "C" int dnnClassify(NodeArg &nodeArg);

#endif
